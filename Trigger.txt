
Create User:
	Create user gm identified by gm;

Grant Permission:
	grant dba to gm;

Create Table:
	create table employees as select * from hr.employees;
	select * from employees;

Delete Data:
	delete from employees;

Create Backup Table:
	create table employees_backup as select * from employees;

Create Trigger:
	create or replace trigger emp_after_insert after insert on employees 
	for each row
	declare
	begin
	insert into employees_backup values(:new.EMPLOYEE_ID, :new.FIRST_NAME, :new.LAST_NAME,
 	:new.EMAIL, :new.PHONE_NUMBER, :new.HIRE_DATE, 
	:new.JOB_ID, :new.SALARY, :new.COMMISSION_PCT, :new.MANAGER_ID, :new.DEPARTMENT_ID);
	dbms_output.put_line('Record Successfully Inserted employees_backup table');
	end

Insert Data:
	1.insert into employees select * from hr.employees where employee_id = 100;

	2.insert into employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL, 
	  PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
	  select * from hr.employees where employee_id= 101;

Show trigger:
	select trigger_name from user_triggers;

Update:
	update employees set last_name = 'Mortoza'  where employee_id = 100;

Update_Trigger:
	create or replace trigger emp_after_update after update on employees 
	for each row
	declare
	begin
	update employees_backup set last_name=:new.last_name 
	where EMPLOYEE_ID = :old.EMPLOYEE_ID;
	dbms_output.put_line('Record Successfully Inserted employees_backup table');
	end;

Delete_Trigger:
	create or replace trigger emp_after_delete after delete on employees 
	for each row
	declare
	begin
	delete employees_backup  
	where EMPLOYEE_ID = :old.EMPLOYEE_ID;
	dbms_output.put_line('Record Successfully Inserted employees_backup table');
	end;



	





